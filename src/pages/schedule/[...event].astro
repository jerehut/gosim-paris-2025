---
// Packages
import { Picture } from "astro:assets";
import type { ImageMetadata } from "astro";

// Components
import Layout from "layouts/Layout.astro";
import schedule from "json/Schedule.json";
import speakers from "json/Speakers.json";

// Types
type Event = {
  title: string;
  content: string;
  date: string;
  timeSlot: string;
  speakers?: { name: string; image?: string; title: string }[];
};

type Schedule = {
  sessions: {
    [category: string]: Event[]; // Add this index signature
  };
};

type Speakers = {
  speakers: { name: string; image?: string; title: string }[];
};

// Generate static paths for events
export async function getStaticPaths() {
  const events: { params: { event: string }; props: { event: Event; category: string } }[] = [];

  // Collect all sessions from all categories
  Object.entries(schedule.sessions).forEach(([category, categoryEvents]) => {
    categoryEvents.forEach((event: Event) => {
      events.push({
        params: {
          event: event.title.toLowerCase().replace(/\s+/g, "-"),
        },
        props: { event, category },
      });
    });
  });

  return events;
}

// Get the event from the route parameter
const { event } = Astro.params as { event: string };
const { event: eventDetails, category } = Astro.props as { event: Event; category: string };

// Import all images
const images = import.meta.glob<{ default: ImageMetadata }>(
  "images/speakers/*.{jpeg,jpg,png,gif}"
);

// Find the first matching category for the event
const eventCategory =
  Object.keys(schedule.sessions).find((cat) => // @ts-ignore
    schedule.sessions[cat].some(
      (e: Event) => e.title.toLowerCase().replace(/\s+/g, "-") === event,
    ),
  ) || "Uncategorized";
---

<Layout
    title={`${eventDetails.title} â€“ GOSIM AI Paris 2025`}
    description={eventDetails.content.replace(/<[^>]*>/g, "").substring(0, 160)}
    navBackground="light"
    pageTransitionName={eventDetails.title}
>
    <section
        class="section speaker-detail-header"
        data-theme-section="light"
        data-bg-section="light"
    >
        <div class="gradient-circle-wrap">
            <div class="gradient-circle"></div>
        </div>
        <div class="container">
            <div class="row">
                <div class="col-speaker">
                    <div class="row-speaker">
                        <div class="speaker-row-meta">
                            <div class="card-tags group-tags event-tag">
                                <div class="single-tag">
                                    <p>{eventCategory}</p>
                                </div>
                            </div>
                            <h1 class="h2">{eventDetails.title}</h1>
                            <div class="flex-event">
                                <p class="timedate">{eventDetails.date}</p>
                                <p>{eventDetails.timeSlot}</p>
                            </div>
                        </div>
                    </div>

                    <div class="box-row box-row-text styled-content">
                        <Fragment set:html={eventDetails.content} />
                    </div>

                    {
                        eventDetails.speakers &&
                            eventDetails.speakers.length > 0 && (
                                <>
                                    <h2 class="h4 event-speaker-title">
                                        Speakers
                                    </h2>
                                    <div class="card-row card-row-speakers event-detail_speakers">
                                        {eventDetails.speakers.map(
                                            (speaker) => {
                                                // Find full speaker details from speakers.json
                                                const fullSpeakerDetails =
                                                    speakers.speakers.find(
                                                        (s) =>
                                                            s.name ===
                                                            speaker.name,
                                                    );

                                                return (
                                                    <div class="card-col">
                                                        <a href={`/speakers/${speaker.name.toLowerCase().replace(/\s+/g, "-")}/`}>
                                                            <div class="single-speakers-card">
                                                                <div class="card-row card-row-image">
                                                                    <div class="card-image">
                                                                        {speaker?.image &&
                                                                            images[`/public/images/speakers/${speaker.image}`] && (
                                                                            <Picture
                                                                                src={images[`/public/images/speakers/${speaker.image}`]()}
                                                                                formats={["webp", "jpg"]}
                                                                                alt={speaker.name}
                                                                                class="overlay"
                                                                                widths={[275, 400, 500, 600, 750, 900]}
                                                                                sizes="(max-width: 700px) 58vw, 450px"
                                                                            />
                                                                        )}
                                                                    </div>
                                                                </div>
                                                                <div class="card-row card-row-info">
                                                                    <h3 class="h5">
                                                                        {
                                                                            speaker.name
                                                                        }
                                                                    </h3>
                                                                    <p>
                                                                        {
                                                                            speaker.title
                                                                        }
                                                                    </p>
                                                                </div>
                                                            </div>
                                                        </a>
                                                    </div>
                                                );
                                            },
                                        )}
                                    </div>
                                </>
                            )
                    }
                </div>
            </div>
        </div>
    </section>
</Layout>
