---
// This component is used to load videos in a way that ensures they play on page changes

const slug = Astro.url.pathname;
---

<script id={`load-videos-${slug.replaceAll('/', '-')}`} is:inline>
    document.addEventListener("DOMContentLoaded", initializeVideos);

    // If you're using a page transition library like Barba.js
    // Detect Barba.js presence and hook into its lifecycle events
    if (typeof barba !== "undefined") {
        barba.hooks.after(() => {
            initializeVideos();
        });
    }

    // For other potential page change mechanisms
    document.addEventListener("visibilitychange", () => {
        if (document.visibilityState === "visible") {
            initializeVideos();
        }
    });

    // Some frameworks use custom events for route changes
    window.addEventListener("popstate", initializeVideos);
    window.addEventListener("pushstate", initializeVideos);
    window.addEventListener("replacestate", initializeVideos);

    function initializeVideos() {
        // Small delay to ensure DOM is fully updated
        setTimeout(() => {
            const videos = document.querySelectorAll("video");

            videos.forEach((video) => {
                // Force reload of video source if it hasn't loaded
                if (video.readyState === 0) {
                    const sources = video.querySelectorAll("source");
                    sources.forEach((source) => {
                        const currentSrc = source.src;
                        source.src = "";
                        source.src = currentSrc;
                    });

                    // If no source elements, try reloading the video src directly
                    if (sources.length === 0 && video.src) {
                        const currentSrc = video.src;
                        video.src = "";
                        video.src = currentSrc;
                    }

                    // Reload the video element
                    video.load();
                }

                // Try to play the video if it should autoplay
                if (video.hasAttribute("autoplay")) {
                    // Using a promise to handle autoplay restrictions gracefully
                    const playPromise = video.play();

                    if (playPromise !== undefined) {
                        playPromise.catch((error) => {
                            // Auto-play was prevented - usually due to browser policies
                            console.log("Autoplay prevented:", error);

                            // For videos that need sound, we might want to show a play button
                            // For muted videos, we can try to play muted instead
                            if (
                                error.name === "NotAllowedError" &&
                                !video.muted
                            ) {
                                video.muted = true;
                                video
                                    .play()
                                    .catch((e) =>
                                        console.log(
                                            "Still cannot play video:",
                                            e,
                                        ),
                                    );
                            }
                        });
                    }
                }
            });
        }, 300); // 300ms delay to ensure DOM is ready
    }
</script>
